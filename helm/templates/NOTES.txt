CHART NAME: {{ .Chart.Name }}
CHART VERSION: {{ .Chart.Version }}
APP VERSION: {{ .Chart.AppVersion }}

** Please be patient while the chart is being deployed **


RABBITMQ:
=========
Credentials:
    Username: {{ .Values.rabbitmq.auth.username }}
    To get password:
    echo $(kubectl get secret --namespace {{ .Release.Namespace }} {{ .Values.rabbitmq.auth.existingPasswordSecret }} -o jsonpath="{.data.rabbitmq-password}" | base64 -d)

IMPORTANT NOTE: the credentials are saved in persistent volume claims and will not be changed upon upgrade or re-installation unless the persistent volume claim has been deleted. If this is not the first installation of this chart, the credentials may not be valid.

This is applicable when no passwords are set and therefore the random password is autogenerated. In case of using a fixed password, you should specify it when upgrading.

More information about the credentials may be found at https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues/#credential-errors-while-upgrading-chart-releases.

{{- $rmqMgrPort := .Values.rabbitmq.service.ports.manager }}

The RabbitMQ Manager API or Web UI can be accessed within the cluster on port {{ $rmqMgrPort }} at
{{ include "idxworker.rabbitmq.hostname" . }}

Access the web console or API by port-forwarding:

kubectl -n {{ .Release.Namespace }} port-forward svc/{{ .Release.Name }}--rabbitmq-headless {{ $rmqMgrPort }}:{{ $rmqMgrPort }} &

...then login to the Rabbitmq web console: http://localhost:{{ $rmqMgrPort }} using the credentials
above, and/or use the API - for example, to see the number of messages on the 'index' queue:

$ curl  -u username:password http://localhost:15672/api/queues/%2f/index | jq | grep "messages\":"

API documentation is available at:
https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.13.1/deps/rabbitmq_management/priv/www/api/index.html

{{- if .Values.rabbitmq.metrics.enabled }}

To access the RabbitMQ Prometheus metrics, get the RabbitMQ Prometheus URL by running:

    kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "common.names.fullname" . }} {{ .Values.service.ports.metrics }}:{{ .Values.service.ports.metrics }} &
    echo "Prometheus Metrics URL: http://127.0.0.1:{{ .Values.service.ports.metrics }}/metrics"

Then, open the obtained URL in a browser.

{{- end }}


SOLR:
=====
Solr can be accessed via port {{ .Values.global.solrPort }} on the following DNS name from within
your cluster:

    {{ include "idxworker.solr.hostname" . }}:{{ .Values.global.solrPort }}

{{- if .Values.solr.auth.enabled }}

To get the Solr credentials execute the following commands:

    echo Username: {{ .Values.solr.auth.adminUsername }}
    echo Password: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ .Values.solr.auth.existingSecret  }} -o jsonpath="{.data.solr-password}" | base64 -d)

{{- end }}

Connect to the SOLR Dashboard by creating a kube proxy, and then browse to the local address:

kubectl -n {{ .Release.Namespace }} port-forward service/{{ .Release.Name }}-solr {{ .Values.global.solrPort }}:{{ .Values.global.solrPort }} &

Solr URL: http://127.0.0.1:{{ .Values.global.solrPort }}/solr/

{{- if .Values.solr.metrics.enabled  }}

Solr Prometheus metrics can be accessed via port {{ .Values.metrics.service.ports.http }} on the following DNS name from within your cluster:

    {{ printf "%s-exporter" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:{{ .Values.metrics.service.ports.http }}/metrics

{{- end }}
