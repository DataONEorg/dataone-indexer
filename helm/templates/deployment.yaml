apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "idxworker.fullname" . }}
  labels:
    {{- include "idxworker.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "idxworker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "idxworker.selectorLabels" . | nindent 8 }}
      namespace: {{ .Release.Namespace }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "idxhelpers.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "idxhelpers.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "idxhelpers.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "idxhelpers.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      serviceAccountName: {{ include "idxworker.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
        {{- if .Values.idxworker.enableMountWarmupHook }}
          lifecycle:
            postStart:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    {
                      ## This is a workaround for the Lustre file system
                      echo "$(date '+%Y-%m-%d %H:%M:%S.%3N') - Warming up mounted directories..." >> /tmp/postStart.log
                      ls -1 /var/metacat/hashstore/metadata/tmp > /dev/null 2>&1 || true
                      ls -1 /var/metacat/hashstore/refs/tmp > /dev/null 2>&1 || true
                      ls -1 /var/metacat/hashstore/objects > /dev/null 2>&1 || true
                      ls -1 /var/metacat/hashstore/refs/pids > /dev/null 2>&1 || true
                      ls -1 /var/metacat/hashstore/refs/cids > /dev/null 2>&1 || true
                      echo "$(date '+%Y-%m-%d %H:%M:%S.%3N') - Warm-up complete." >> /tmp/postStart.log
                    }
        {{- end }}
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.idxworker.readinessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - test $(($(date +%s) - $(stat -c %Y /var/lib/dataone-indexer/livenessprobe))) -lt 20
            initialDelaySeconds: 20
            periodSeconds: 15
          {{- end }}
          {{- if .Values.idxworker.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - test $(($(date +%s) - $(stat -c %Y /var/lib/dataone-indexer/readinessprobe))) -lt 40
            initialDelaySeconds: 20
            periodSeconds: 35
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
            {{- tpl (toYaml .Values.extraVolumeMounts) . | nindent 12 }}
            {{- end }}
            - mountPath: /etc/dataone
              name: {{ .Release.Name }}-config-volume
              readOnly: true
            - mountPath: {{ .Values.persistence.mountPath }}
              name: indexer-metacat-pv
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
              readOnly: true
            - mountPath: /etc/dataone/tdb-cache
              name: {{ .Release.Name }}-temp-tripledb-volume
          env:
            - name: DEBUG
              value: "{{ .Values.idxworker.debug }}"
            {{- if .Values.javaMem }}
            - name: IDX_JAVA_MEM
              value: {{ .Values.javaMem | quote }}
            - name: DATAONE_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-indexer-token
                  key: DataONEauthToken
                  # If 'false', the secret must exist before the pod can start
                  # App versions before v2.3.4 will read this value from a config file, not the env var.
                  optional: true
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{  required "rabbitmq.auth.existingPasswordSecret IS REQUIRED" .Values.rabbitmq.auth.existingPasswordSecret }}
                  key: rabbitmq-password
                  optional: false
            {{- if .Values.solr.auth.enabled }}
            - name: SOLR_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.solr.auth.existingSecret }}
                  key: SOLR_ADMIN_PASSWORD
                  optional: true
            {{ end }}
      initContainers:
        - name: dependencies
          image: busybox:latest
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          command:
            - sh
            - -c
            - |
              ##
              ## wait for RabbitMQ to be ready...
              ##
              RMQHOST="{{ include "idxworker.rabbitmq.hostname" . }}";
              RMQPORT={{ include "idxworker.rabbitmq.hostport" . }};
              echo "* * * Checking if RabbitMQ is ready at $RMQHOST:$RMQPORT * * *";
              until nc -z $RMQHOST $RMQPORT > /dev/null; do
              echo waiting for RabbitMQ at $RMQHOST - port $RMQPORT; sleep 1; done;
              ##
              ## wait for Solr to be ready...
              ##
              SOLRURI="/solr/
              {{- required "solr.customCollection IS REQUIRED" .Values.solr.customCollection -}}
                  /admin/file?file=schema.xml&contentType=text/xml";
              {{- $solrHost := (include "idxworker.solr.hostname" .) }}
  {{- $solrPort := (required "solr.service.ports.http REQUIRED" .Values.solr.service.ports.http) }}
              echo "* * * Checking if Solr is ready at http://{{ $solrHost }}:
              {{- $solrPort }}$SOLRURI * * *";
              until [[ $(echo -e "GET $SOLRURI HTTP/1.1\r\nHost: {{ $solrHost -}}
              \r\n\r\n" | nc {{ $solrHost }} {{ $solrPort -}}
              | grep -c "<schema name=\"dataone") == 1 ]]; do
              echo waiting for Solr Schema to be accessible at http://{{ $solrHost }}:
              {{- $solrPort }}$SOLRURI; sleep 1; done;
      volumes:
        {{- if .Values.extraVolumes }}
        {{- tpl (toYaml .Values.extraVolumes) . | nindent 8 }}
        {{- end }}
        - name: {{ .Release.Name }}-config-volume
          configMap:
            name: {{ .Release.Name }}-indexer-configfiles
            defaultMode: 0644
        - name: indexer-metacat-pv
          {{- if and .Values.persistence.hostPath .Values.persistence.hostPath.path }}
          hostPath:
            path: {{ tpl .Values.persistence.hostPath.path . }}
            type: {{ .Values.persistence.hostPath.type }}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "idxworker.shared.claimName" . }}
            readOnly: true
          {{- end }}
        - name: {{ .Release.Name }}-temp-tripledb-volume
          {{- if .Values.idxworker.tripleDbStorageDefinition }}
          {{- tpl (toYaml .Values.idxworker.tripleDbStorageDefinition) . | nindent 10 }}
          {{- else }}
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteOnce" ]
                {{- if ne (quote .Values.global.ephemeralVolumeStorageClass) "" }}
                storageClassName: {{ .Values.global.ephemeralVolumeStorageClass }}
                {{ end -}}
                resources:
                  requests:
                    storage: 1Gi
         {{- end }}
